<?php /** @var \M2Boilerplate\ServiceWorker\Block\Js $block */ ?>
'use strict';

// Import and initialise external dependencies
// #####################################

<?php if ($externalScripts = $block->getExternalScriptUrls()): ?>
importScripts(<?= implode(", ", array_map(function ($url) { return "'{$url}'"; }, $externalScripts)) ?>);
<?php endif; ?>

<?php if ($block->isGaOfflineEnabled()): ?>
// Initialize the google analytics
// #####################################
workbox.googleAnalytics.initialize();
<?php endif; ?>

// Initialize the workbox service worker
// #####################################

workbox.core.skipWaiting();
workbox.core.clientsClaim();

// Pre-cache fallback responses
// #####################################

const OFFLINE_PAGE_URL = '<?= $block->getOfflinePageUrl() ?>';
const DEPLOYED_VERSION = '<?= $block->getVersion() ?>';

workbox.core.setCacheNameDetails({
  suffix: DEPLOYED_VERSION
});

// Serve assets using cache-first strategy
// #####################################

workbox.routing.registerRoute(/static\/version[0-9]{10}\/.*\.(png|jpeg|jpg|gif|ico|svg)$/, new workbox.strategies.CacheFirst());
workbox.routing.registerRoute(/static\/version[0-9]{10}\/.*\.(js|css|json)$/, new workbox.strategies.CacheFirst());


// Clean Up old caches
// #####################################
self.addEventListener('activate', function(event) {
  event.waitUntil(
    caches
      .keys()
      .then(keys => keys.filter(key => !key.endsWith(DEPLOYED_VERSION)))
      .then(keys => Promise.all(keys.map(key => caches.delete(key))))
  );
});

// Add Offline Fallback
// #####################################
workbox.navigationPreload.enable();
if (OFFLINE_PAGE_URL) {
    const networkOnly = new workbox.strategies.NetworkOnly();
    const CACHE_NAME = 'offline-html-'+DEPLOYED_VERSION;
    // This assumes /offline.html is a URL for your self-contained
    // Populate the cache with the offline HTML page when the
    // service worker is installed.
    self.addEventListener('install', async (event) => {
      return event.waitUntil(
        caches.open(CACHE_NAME)
          .then((cache) => cache.add(OFFLINE_PAGE_URL))
      );
    });
    const navigationHandler = async (params) => {
      try {
        // Attempt a network request.
        return await networkOnly.handle(params);
      } catch (error) {
        // If it fails, return the cached HTML.
        return caches.match(OFFLINE_PAGE_URL, {
          cacheName: CACHE_NAME
        });
      }
    };
    // Register this strategy to handle all navigations.
    workbox.routing.registerRoute(
      new workbox.routing.NavigationRoute(navigationHandler)
    );
}

<?php if ($childHtml = $block->getChildHtml()): ?>
// Extensions
// #####################################
<?= $childHtml ?>
<?php endif; ?>


